<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Change Log</title>
    </head>
    <body>
        <h1>Change Log</h1>

        <h2>5.1.3 Release</h2>
        <ul>
            <li>Upgrade HSQLDB dependency to org.hsqldb:hsqldb:jar:2.7.4</li>
            <li>Upgrade Jackcess dependency to io.github.spannm:jackcess:jar:5.1.0</li>
            <li>Fix issue #22: Sql type of autoNumber column (closes #22)</li>
            <li>Maven dependency updates</li>
            <li>Code hygiene</li>
        </ul>

        <h2>5.1.2 Release</h2>
        <ul>
            <li>Upgrade HSQLDB dependency to org.hsqldb:hsqldb:jar:2.7.3 (closes #6)</li>
            <li>Complete bin.zip distribution for download (closes #7)</li>
            <li>Binary distrib to contain shaded executable uber jar (closes #9)</li>
            <li>Exclude ODBC Tables (closes #10)</li>
            <li>Throw SQLFeatureNotSupportedException for unsupported driver features (closes #11)</li>
            <li>Maven dependency updates</li>
            <li>Avoid locale manipulation in unit tests</li>
            <li>Fix Sonarcloud findings</li>
            <li>Custom JUnit5 test sources</li>
            <li>Switch from slf4j to JPL logging (Java Platform/System Logger)</li>
            <li>Driver to return actual major and minor version</li>
            <li>Move from com.healthmarketscience.jackcess to io.github.spannm.jackcess</li>
        </ul>

        <h2>5.1.1 Release</h2>
        <ul>
            <li>Update unit test resources</li>
            <li>Migrate documentation to Maven site</li>
            <li>Upgrade slf4j version</li>
            <li>Updates for code style</li>
            <li>Document/modernize MS Access functions</li>
        </ul>

        <h2>5.1.0 Release</h2>
        <ul>
            <li>First release under groupId io.github.spannm</li>
            <li>Intended as a drop-in replacement for prior releases</li>
            <li>Maintains runtime compatibility to prior versions</li>
            <li>Published at Maven Central</li>
            <li>Java 11 now minimum required Java version</li>
            <li>Upgrade Jackcess dependency to version 4.0.5</li>
            <li>Upgrade HSQLDB/HyperSQL dependency to version 2.7.1 (free of known CVEs)</li>
            <li>Modernization of complete codebase</li>
            <li>Enforce Checkstyle and PMD on codebase</li>
            <li>Upgrade tests to JUnit 5</li>
            <li>Refactor test suite</li>
            <li>Overhaul POM and inherit from org.basepom:basepom-oss</li>
        </ul>

        <h2>5.0.1 Release</h2>
        <ul>
            <li>fix updates failed in tables with Blob/Ole not null</li>
            <li>Insert/Update of Blob/Ole objects in this simplified way:  preparedStetement.setObject(1, new File("c:\\&lt;file path&gt;"));</li>
        </ul>

        <h2>5.0.0 Release</h2>
        <ul>
            <li>BLOB insert failed for table with multi-column PK</li>
            <li>Add "Currency" as named format for Format function</li>
            <li>CREATE TABLE with underscore in table name could cause error</li>
            <li>Upgrade to hsqldb-2.5.0 and jackcess 3.0.1</li>
            <li>Support for java.time.LocalTime parameters to prepared statements</li>
            <li>ParametersTest failures under HSQLDB 2.4.x</li>
            <li>Date/â€‹Time values corrupted by JVM timezone</li>
            <li>It now requires Java 8 or later to run</li>
        </ul>

        <h2>4.0.4 Release</h2>
        <ul>
            <li>Upgrade to Jackcess 2.1.11</li>
            <li>Support Access_2016 "version 5" file format</li>
            <li>Initial support for "Large Number" (BIGINT) columns: CRUD, DDL
            </li>
            <li>Fix issue with NOT NULL columns created by UCanAccess DDL not respected by ACE/Jet</li>
            <li>Fix issue with multiple FK constraints between the same two tables</li>
            <li>Reduce HSQLDB resource consumption by lazy-loading "OLE Object" (BLOB) fields</li>
        </ul>

        <h2>4.0.3 Release</h2>
        <ul>
            <li>Upgrade to Jackcess 2.1.9</li>
            <li>Enable arbitrary AutoNumber insert values &lt;= 0</li>
            <li>Fix CREATE TABLE in UCanAccess (Access unable to open table when last column was declared as AUTOINCREMENT)</li>
            <li>Respect constraint name when adding foreign key</li>
            <li>Fix Query failed when Java Locale language is Turkish: uppercasing of column name caused query to fail</li>
            <li>Fix WHERE clause with NOT LIKE "T#####" caused error</li>
            <li>Fix Hyphen in DDL column name confused PreparedStatement, e.g., CREATE TABLE zzzFoo ([Req-MTI] TEXT(20))</li>
            <li>Explicit DDL support for Hyperlink fields, e.g. CREATE TABLE urlTest (id LONG PRIMARY KEY, website HYPERLINK)</li>
            <li>Maven POM Update, Patch to UcanaccessCallableStatement for Java &gt;= 7 compilers</li>
            <li>Fix getBlob for null values</li>
            <li>Fix constraint breach warning referring to wrong row</li>
            <li>Fix regional settings issue under non-US locales</li>
        </ul>

        <h2>4.0.2 Release</h2>
        <ul>
            <li>
                Enhanced the console features
                <ul>
                    <li>Better escaping of exported CSV fields with embedded delimiters and quotes</li>
                    <li>Add -d flag to change delimiter</li>
                    <li>Add -t flag to export large tables directly</li>
                    <li>Add --big_query_schema flag to export the Google BigQuery schema file</li>
                    <li>Add --newlines flag to preserve embedded newlines when exporting to CSV</li>
                    <li>Print UTF-8 byte order mark if --bom flag is given</li>
                    <li>Fix incorrect SimpleDateFormat which outputs 12:00:00 for midnight in the "export" command</li>
                </ul>
            </li>
            <li>Optimized the preparser</li>
            <li>Fix problem with remap= under Linux</li>
            <li>Fix bug with built-in functions used in calculated field expressions. Added fake left$ and right$
                functions
            </li>
            <li>Patched mapping of CHAR type when used in DDL</li>
            <li>Fix insert of arbitrary AutoNumber values</li>
            <li>Fix bug with the setting of Null values on complex type columns(i.e., Attachment, Multivalue)</li>
            <li>Fix bug on column aliases containing an accented character (aliases generated by Hibernate)</li>
        </ul>

        <h2>4.0.1 Release. Fix release</h2>
        <ul>
            <li>Fixed bug that could affect columns order when creating a new table via ALTER TABLE statement and
                using a particular DDL statements sequence
            </li>
            <li>Minor fix on the UCanAccess console</li>
        </ul>

        <h2>4.0.0 First step towards a full DDL implementation</h2>
        <ul>
            <li>
                Before this version only limited DDL was supported (CREATE TABLE and DROP TABLE). Now we've
                implemented:
                <ul>
                    <li>
                        table renaming, e.g.:
                        <div class="source">ALTER TABLE [My old name] RENAME TO [My new name]</div>
                    </li>
                    <li>
                        add new Column to existing table, e.g.:
                        <div class="source">ALTER TABLE xxx ADD COLUMN yyy TEXT</div>
                        <div class="source">ALTER TABLE zzz ADD COLUMN kkk DATETIME NOT NULL DEFAULT now()</div>
                        <div class="source">ALTER TABLE [222 crazy name] ADD COLUMN [another crazy name] numeric (23,6)
                            default 13.031955 not null
                        </div>
                    </li>
                    <li>
                        add new Index to existing table, e.g.:
                        <div class="source">CREATE unique INDEX [index name] on [table name] (a ASC,c ASC )</div>
                        <div class="source">CREATE INDEX [index name] on bbb (a ASC,c ASC )</div>
                    </li>
                    <li>
                        add Primary Key to existing table,, e.g.:
                        <div class="source">ALTER TABLE xxx add Primary key (column1,column2)</div>
                    </li>
                    <li>
                        Foreign key creation, e.g.:
                        <div class="source">
                            ALTER TABLE x add constraint constr foreign key (colx1,colx2) references y (coly1, coly2) ON delete
                            cascade<br/> Now you can also create FKs while creating a new table, e.g.,<br/> CREATE TABLE
                            Babe( k LONG , y LONG, PRIMARY KEY(k,y), <span class="red1">FOREIGN KEY (y) REFERENCES Parent
                            (x) </span>)
                        </div>
                    </li>
                </ul>
            </li>
            <li>Upgrade to Jackcess 2.1.6</li>
        </ul>

        <h2>3.0.7</h2>
        <ul>
            <li>Fixed aggregate functions on the datatype DATE (e.g. SELECT first(date_init) FROM ...)</li>
            <li>Fixed update queries having a parametric condition in the where clause (e.g. UPDATE COL1 SET
                COL1=[PAR1] WHERE COL2=[PAR2])
            </li>
            <li>Optimized the CLNG function</li>
            <li>Fixed a few bugs the happened when the parameter keepMirror is being used: see
                ReloadPersistentMirrorTest, a bug on the ORDER BY case-sensitivity when the access db is updated
                externally
            </li>
        </ul>

        <h2>3.0.6</h2>
        <ul>
            <li>Enhanced DataSource implementation</li>
            <li>Fixed bug that could have effect when a column name contained both a question mark '?' and a space
                ' ' characters
            </li>
            <li>Fixed bug with APPEND or UPDATE access queries which used a variable of type TEXT as paramenter</li>
            <li>Fixed naming-conflict bug that could have effect when updating tables with the same name and a
                different structure from multiple databases connections
            </li>
        </ul>

        <h2>3.0.5</h2>
        <ul>
            <li>Fixed major bug on single-precision numeric column management: in particular conditions it could
                cause misalignment between hsqldb mirror and access db
            </li>
            <li>Enhanced DDL(Create Table) compatibility with PreparedStatement for use with other ORM tools</li>
            <li>Fixed bug on keyword "ROW" (it wasn't listed as keyword)</li>
            <li>When using the net.ucanaccess.jdbc.UcanloadDriver and the loader.jar, the setting
                -DUCANACCESS_HOME=D:\301\UCanAccess-3.0.1-bin is no more needed if the loader.jar of your classpath is
                picked up directly from a standard ucanaccess distribution. (i.e. from the loader folder in the unziped
                content of the ucanaccess-xxx.bin.zip) Thanks to Gord Thompson for the idea and having suggested the code
            </li>
        </ul>

        <h2>3.0.4</h2>
        <ul>
            <li>
                Implemented MS Access parametric SELECT queries. They will be available, where possible, using the
                "table()" syntax, e.g.,
                <div class="source">SELECT * FROM table(queryWithParameters(#1971-03-13#,'hi babe'))</div>
                A default
                query, parametrized with all parameters to null, will be available as well.
            </li>
            <li>
                Implemented APPEND, DELETE and UPDATE MS Access queries. They will be available, where possible,
                as stored precedures and via CallableStatement, e.g.:
                <div class="source">CallableStatement cs= ucanaccess.prepareCall("{call insert_xxx(?,?,?)}");</div>
            </li>
            <li>fixed issue(in the connecting phase) with table/column names starting with the $ character</li>
            <li>fixed issue(in querying) with table/column names within both a single quote character and a blank
                space character
            </li>
            <li>fixed bug that happened in subsequent drop and create table statements when executed without
                calling a commit between them
            </li>
            <li>fixed dlookup function</li>
            <li>fixed capitalisation in column metadata for MS Access queries(views) like SELECT tablename.* FROM
                ....
            </li>
            <li>fixed getBestRowIdentifier DatabaseMatadata method</li>
            <li>the proper exception is thrown when calling executeQuery method for update, insert and delete
                executions
            </li>
            <li>fixed bug on conflicting table names(e.g., my table and my_table)</li>
        </ul>

        <h2>3.0.3.1</h2>
        <ul>
            <li>Fixed major bug: in several cases exclamation mark in literal textual values (i.e., if you didn't
                use a PreparedStatement) was saved as point.
            </li>
        </ul>

        <h2>3.0.3 Release: still a fix-bugs version, enhancements coming soon</h2>
        <ul>
            <li>fixed bug related to linked tables(from external db) with a complex type column.</li>
            <li>fixed bug on concurrent access in append on the same table by two or more different processes when
                using an auto increment key.
            </li>
            <li>fixed bug on iif function that now accepts null(interpreted as false) values as first argument.</li>
            <li>bug on like criteria: now digit intervals are supported ([4-7] or [!2-6]).</li>
            <li>fixed bug on metadata reloading when a concurrent process does structural upgrades(e.g., when
                creating a table).
            </li>
            <li>fixed bug when connecting to a database with a table/column whose the name contains the reserved
                character $.
            </li>
            <li>fixed bug on # special character escaping in like criteria expressions (to be escaped as usual with
                [#]).
            </li>
            <li>
                About date values antecedent to the October 15, 1582 (Gregorian):
                <ul>
                    <li>when using a date in literal form (e.g. #1095-05-10#, or passing the string '1095-05-10' to the
                        dateValue function ) this is interpreted in an MS Access compatible way, i.e., pure Gregorian calendar
                    </li>
                    <li>also the FORMAT function is now consistent with this convention</li>
                    <li>when passing to a PreparedStatement a date antecedent to the October 15, 1582, it's an
                        applicative duty to create it consistently within the proper Calendar, i.e. by using
                        GregorianCalendar.setGregorianChange(new java.util.Date(Long.MIN_VALUE)).
                    </li>
                </ul>
            </li>
        </ul>

        <h2>3.0.2 Release</h2>
        <ul>
            <li>Fixed bug in CREATE TABLE DDL implementation, when using DECIMAL or NUMERIC columns on
                nullable(required) column property.
            </li>
        </ul>

        <h2>3.0.1 Release</h2>
        <ul>
            <li>Fixed bug in "create table as select..." statement where there is a name conflict in columns
                defined in the select.
            </li>
            <li>Fixed bug in "create table" where one or more column names are the same names of specific access
                types(e.g., CREATE TABLE ttt(counter COUNTER PRIMARY KEY, text TEXT)).
            </li>
            <li>
                Classloading isolation: in order to avoid conflicts in dependencies jars used by user development
                environment a new jar named ucanload.jar has been added to this distribution. This is strongly suggested
                for the use of ucanaccess with LibreOffice/OpenOffice. In other words, this allows you to use in your
                applications/tools the version of commons-lang, commons-logging, jackcess and hsqldb you need, without any
                issue or impact on ucanaccess. If you are facing with a library conflict issue, you MUSTN'T add neither
                ucanaccess.jar nor any of the dependencies jars to your classpath but:<br/>
                <ul>
                    <li>unzip the UCanAccess-3.X.X-bin.zip distribution</li>
                    <li>add to your classpath just the ucanload.jar from the "loader" folder of the distribution</li>
                    <li>set the system variable UCANACCESS_HOME so that it points the UCanAccess-3.x.x-bin folder (e.g.
                        -DUCANACCESS_HOME=D:\301\UCanAccess-3.0.1-bin).
                    </li>
                    <li>when required (e.g. with java 6) use the net.ucanaccess.jdbc.UcanloadDriver (e.g.,
                        Class.forName("net.ucanaccess.jdbc.UcanloadDriver")) instead of the original one
                        net.ucanaccess.jdbc.UcanaccessDriver.
                    </li>
                </ul>
                See also the updates to the LibreOffice/OpenOffice configuration on the "JDBC Client Tools" tab of this
                site.
            </li>
        </ul>

        <h2>3.0.0 Release</h2>
        <ul>
            <li>Relicense to Apache 2.0!!</li>
            <li>Upgrade to jackcess 2.1.2.</li>
            <li>
                Metadata issues:
                <ul>
                    <li>Solved capitalization issues in both DatabaseMetaData and ResultSetMetaData implementations.
                        They both have been reimplemented for this specific purpose. Now UCanAccess can provide metadata with
                        the correct capitalization(and no more all in upper case).
                    </li>
                    <li>Changed escaping of column and table names containing special characters or out-of-rules(e.g.
                        starting with a number): now, in these cases, you can and must use the names defined in
                        access(obviously in a case insensitive manner).
                    </li>
                    <li>Supported all characterset with metadata (they were supported in data but not always in
                        metadata elements like column or table names)
                    </li>
                    <li>Fixed isAutoIncrement and isCurrency ResultSetMetaData methods.</li>
                    <li>Customized DatabaseMetaData.getColumns so that it can now provide:<br/> the default column
                        values in the COLUMN_DEF columm<br/> the correct IS_AUTOINCREMENT informations<br/> the
                        correct IS_GENERATEDCOLUMN (used for calculated fields)<br/> the customized column
                        ORIGINAL_TYPE(original type in access)<br/>
                    </li>
                    <li>Customized DatabaseMetaData.getClientInfoProperties method that now returns ucanaccess driver
                        available properties.
                    </li>
                </ul>
            </li>
            <li>
                Implemented, for counters handling :
                <div class="source">
                    DISABLE AUTOINCREMENT ON TABLE_NAME<br/> and <br/> ENABLE AUTOINCREMENT ON TABLE_NAME <br/>
                </div>
                It may be useful in import/export of data from and to different tables with the same structure, avoiding
                to break some FK constraint.
            </li>
            <li>
                Optimization issues:
                <ul>
                    <li>Fixed memory leak in MemoryTimer. It had effect in some particular situations (using the single
                        connection mode if you're connecting to multiple db,in the case continous update by a different
                        process, in the case of pooling on the db with intervals greater than the InactivityTimeout).
                    </li>
                    <li>Optimized reloading of db instances. If and only if you're sure that your db can be accessed by
                        the MS Access GUI and just one JVM instance (using UCanAccess), you can now use the connection
                        parameter PreventReloading=true. It avoid the data to be reloaded when they aren't actually changed by
                        the GUI.
                    </li>
                </ul>
            </li>
            <li>
                Changed behavior:
                <ul>
                    <li>In updatable ResultSet removed the constraint to set all columns before inserting new rows,
                        even if they are null or autoincrement.
                    </li>
                    <li>Extended SELECT @@IDENTITY and Statement.getGeneratedKeys() features to the GUID type.</li>
                    <li>
                        Concat character operators (&amp;,+,||) behavior with null:
                        <div class="source">
                            null &amp; 'thing' -&gt; 'thing'. It gave null in previous versions.<br/> null + 'thing' -&gt;
                            'thing'. It gave null in previous versions.<br/>
                        </div>
                        If you want to switch to the old behavior, you have to set the new connection property
                        concatnulls=true.
                    </li>
                </ul>
            </li>
        </ul>

        <h2>2.0.9.5 Release(A bugfix release waiting for the 3.0.0)</h2>
        <ul>
            <li>Upgrade to Jackcess 2.1.0</li>
            <li>Re-implemented SWITCH function with a different approach</li>
            <li>Fixed 2.0.9.4 regression related to databases with corrupted metadata(wrong rows number)</li>
            <li>Changed read-only exception message for Access 97 files</li>
            <li>Fixed bug on the value returned by the Statement.execute method when a ddl statement(create table)
                is executed
            </li>
        </ul>

        <h2>2.0.9.4 Release</h2>
        <ul>
            <li>Porting to HSQLDB 2.3.1.</li>
            <li>Fixed bug that may have effect in the case of a naming conflict between a table in the opened
                database and a linked table in an external database.
            </li>
            <li>Allowed connecting to a corrupted database even if data violate an Unique, Not Null or Foreign Key
                constraint: tables containing bad data are set read only, and a warning is logged.
            </li>
            <li>Added parameter Lobscale, to optimize memory occupation when a relevant percent of memory
                occupation is for Ole(Blob) data. This may also allow, in many cases, to use the memory=true setting,
                whilst it was impossible before. It should be set to a value close to the average size of Ole instances.
                According with the HSQLDB documentation, the values allowed are 1,2,4,8,18,32 (the unit is Kb). Default is
                2 if memory=true, 32 (hsqldb default) otherwise.
            </li>
            <li>Added parameter Skipindexes(default=false), in order to minimize memory occupation. It allows
                skipping the creation of simple, untied to contraints, indexes. It doesn't have effect on referential
                integrity constraints (i.e., Index Unique, Foreign Key or Primary Key).
            </li>
            <li>Solved bug related to the ÃŸ character, when used in column names.</li>
            <li>Fixed the error message logged when a db link metadata is broken(for metadata corruption).</li>
            <li>Overloaded NZ function: it can now accept numeric double values as argument.</li>
            <li>Speeded database loading (first connection time to a given database).</li>
            <li>Fixed bug that happened with table or column names containing an apostrophe or a quotation mark.</li>
            <li>Fixed bug in the switch function parsing.</li>
            <li>Deprecated and substituted parameter lockMdb: the new name for this parameter is openexclusive.</li>
            <li>Fixed bug on table autoreferential constraint checks (indipendence from storage order).</li>
            <li>Supported exclamation point, as well as in the Access SQL syntax.</li>
        </ul>

        <h2>2.0.9.3 Release</h2>
        <ul>
            <li>Upgrade to jackcess 2.0.8</li>
            <li>Fixed console output(it sometime showed correctly loaded queries in the list of the queries it
                wasn't able to load)
            </li>
            <li>Fixed issues that may happen with few unregistred keywords(e.g. 'cardinality') if used as column
                name with a default value. Those keywords didn't have any effect on SQL, except for the particular case
                above.
            </li>
            <li>Fixed Connection setSavepoint(String spn) method(setSavepoint only worked fine with no-arguments);</li>
            <li>Fixed "Create table as select ..." DDL statement when using with a group by clause with two or more
                columns.
            </li>
            <li>Allowed DDL with PreparedStatement(for ORM libraries' use).</li>
            <li>Implemented ErrorHandler for invalid characters sequences: an Exception will be thrown to identify
                in which table, column and row the error occured.
            </li>
            <li>Fixed ResultSet.getString when called on a numeric decimal column.</li>
            <li>Fixed bug on logging/shutdown. At the vm end some unneccessary operation was performed in the case
                of memory=false and singleConnection=true Logs about on-disk database were shown when program terminates
                (long after the latest connection was closed).
            </li>
            <li>Added mirrorFolder connection parameter that forces memory=false and allows users to set the
                directory in which the mirror db will be created. Simply set this parameter to java.io.tmpdir in order to
                specify the system temp folder for that.
            </li>
            <li>Fixed residual issue (access 2007) creating new tables on NOT NULL property.</li>
            <li>Added orderJet function to allow compliance with Jet sorting logic that skip hyphen minus '-', en
                dash 'â€“', em dash 'â€”' <br/> and in the middle of a string:<br/> i.e. even if "-" comes before "/"<br/>
                and "a-" before "a/"<br/> and "a- b" before "a/ b"<br/> unexpectedly, likely to handle compound
                words "a/b" comes before "a-b"<br/> WORKAROUND suggested: if you want the same behavior of Access:
                SELECT * FROM table2 order by orderJet( COLUMN1).
            </li>
        </ul>

        <h2>2.0.9.2 Release</h2>
        <ul>
            <li>Upgrade to jackcess 2.0.6.</li>
            <li>Fixed methods getErrorCode and getSQLState in the UCanAccess SQLException implementation (class
                UcanaccessSQLException). SQL error codes and states are those gotten from hsqldb (you can handle them by
                using the constants in net.ucanaccess.jdbc.UcanaccessErrorCodes) except for the internal UCanAccess or
                Jackcess exceptions that always give the error code UcanaccessErrorCodes.UCANACCESS_GENERIC_ERROR.
            </li>
        </ul>

        <h2>2.0.9.1 Release</h2>
        <ul>
            <li>Now UCanAccess completely supports calculated fields, even in insert and/or update statements.</li>
            <li>Speeded the first connection (loading time) when dealing with large databases, especially with the
                memory=false.Optimized the use of resources (memory, file system).
            </li>
            <li>Upgrade to jackcess 2.0.5. A later fix from the jackcess trunk to the 2.0.5 release has been
                included in this distribution. See either the README.txt or the NOTICE.txt files for further details.
            </li>
        </ul>

        <h2>2.0.9 Release</h2>
        <ul>
            <li>A major issue, involving some already damaged mdb, has been solved: the data of some table could be
                partially loaded with the previous UCanAccess versions. A table in an access database has a row count in
                its metadata(saved the database), and this issue was due to a misalignment between row count in the
                metadata and the real number of table rows. So, it has been fixed in UCanAccess 2.0.9 by avoiding to rely
                on this metadata information while loading data. Also, UCanAccess 2.0.9 will raise a warning in these
                cases, suggesting to repair the mdb file.
            </li>
            <li>Strongly improved the UCanAccess behavior in the case of multiple processes concurrency.</li>
            <li>Added connection parameter columnOrder to allow to use, in your SQL, the "display" order ("data"
                order is still the default).<br/> e.g. <i>jdbc:ucanaccess://c:/data/myaccessdb.mdb;COLUMNORDER=DISPLAY.</i> <br/>Once
                a column order has been setted on the first connection to a given database, the column order setting will
                be the same for all the following connections to that database, in the whole VM life.
            </li>
            <li>Allowed special characters and blank spaces in DDL. Column and table names, in this specific case,
                are not more escaped in the persisted table definition on the access file, but just in the mirror hsqldb
                database. <br/>e.g. <i>CREATE TABLE [result ccc]( [aa a()] AUTOINCREMENT PRIMARY KEY, [---bghhaaf
                b aa] TEXT(222) DEFAULT 'vvv') <br/>DROP TABLE [result ccc]
                </i>
            </li>
            <li>Allowed the use of the "autoincrement" keyword as "counter" synonymous in DDL.</li>
            <li>Implemented @@IDENTITY: <i>SELECT @@IDENTITY</i> query will return the latest generated key in the
                context of the current connection.
            </li>
            <li>Implemented <i>Statement.getGeneratedKeys()</i>: it returns the latest key generated by the
                statement.
            </li>
            <li>Allowed filtering on complex type columns(version, attachment, multi-value).<br/> You can do
                that through one of the following functions: Equals, EqualsIgnoreOrder, Contains.
            </li>
            <li>Implemented Partition function.</li>
            <li>Added support to PreparedStatement.setTime</li>
        </ul>

        <h2>2.0.8 Release</h2>
        <ul>
            <li>Added support to not standard syntax(accepted by MS Access) DELETE * FROM TABLENAME (besides the
                always supported standard syntax DELETE FROM TABLENAME).
            </li>
            <li>Fixed behavior when the USER SQL keyword is used as column name. You still need to escape it using
                square brackets, to avoid ambiguity(e.g. SELECT [USER] FROM USERS). Notice that the user keyword, in
                general, refers to the database user.
            </li>
            <li>Fixed bug that could have effect, in the previous versions, on delete and update statements, when a
                SQL keyword is used as table name.
            </li>
        </ul>

        <h2>2.0.7.1 Release</h2>
        <ul>
            <li>Fix bug on byte type management (when the byte value is between 128 and 255).</li>
            <li>Strongly enhanced implementation of calculated fields (support to power operator ^, return type
                management, fixed rounding bug in operations involving integer literals and so on). Nevertheless tables
                with one or more calculated field are still marked as read-only, waiting for an enhanced I/O support. Also
                notice that calculated fields values are currently "calculated on fly" (that's, for the moment, just a
                simulation) and they aren't read from the database through jackcess. As result, elaborating the
                expressions that depend on the Regional Settings(e.g character string parsed to date value), there could
                be a difference between UCanAccess output and the value saved in the database, if data were inserted with
                a locale setting and then they are read with another one.
            </li>
            <li>Added financial functions (PMT, NPER, IPMT, PPMT, RATE, PV, FV, DDB, SYD, SLN), SQR and FIX
                function.
            </li>
            <li>Treated some more "special characters" (e.g. Â°) in column and table names.</li>
            <li>Fix bugs on DATEVALUE function (internationalisation).</li>
            <li>Overloading of all "date functions", so that they can accept a string (VARCHAR) instead of a date
                as argument. Nevertheless keep in mind that this kind of calls forces a parsing operation, with a result
                which depend on the regional settings (locale), so you had better use the # delimiters and thus pass a
                date value instead of a character string.
            </li>
        </ul>

        <h2>2.0.7 Release</h2>
        <ul>
            <li>Strongly enhanced internationalisation support in date formatting.</li>
            <li>Solved residual bug on boolean type management.</li>
            <li>Introduced implementation of calculated fields. Tables with one or more calculated field are still
                marked as read-only, waiting for an enhanced I/O support.
            </li>
            <li>Fixed bug on working mode.</li>
        </ul>

        <h2>2.0.6.3 Release</h2>
        <ul>
            <li>Fix bugs on Format and IsNumeric functions implementation: fixed the internationalization of
                numeric values, introduced internationalization (related to the current locale ) in the formatting of date
                values, rounding mode "Round Half Up" for numeric values when a pattern is passed as argument (e.g.,
                format(48.1425,'.###') gives the string 48.143 as result).
            </li>
            <li>Fix bug on Int function: now it returns an Integer value (in previous versions it wrongly returned
                a short).
            </li>
            <li>Added ResultSet.deleteRow implementation.</li>
        </ul>

        <h2>2.0.6.2 Release</h2>
        <ul>
            <li>Fix bugs on DDL implementation (in the previous version a Unique Key was created instead of a
                Primary Key, issue using a space string " " as default value, multiple columns Primary Key).
            </li>
            <li>Driver version read directly from the manifest file (Package.getImplementationVersion()), pom.xml
                modified to include default implementation entries in the manifest file.
            </li>
        </ul>

        <h2>2.0.6.1 Release</h2>
        <ul>
            <li>Fix bug on batch implementation: consecutive SQL update operations on the same record using
                executeBatch().
            </li>
            <li>Fix bug on saving column "required" property,in the case of autonumber type columns.</li>
            <li>Fix bug on boolean type management (the handling of null values is different between Access and hsqldb).</li>
        </ul>

        <h2>2.0.6 Release</h2>
        <ul>
            <li>Fix bug on re-authentication with encrypted databases.</li>
            <li>Fix bug on the size of textual columns with access-97 files (which are read-only). This bug could
                cause a failure while connecting to access-97 databases. Therefore, successfully tested read-only
                connection to .eap files.
            </li>
            <li>"CONSTRAINTS" listed and handled as hsqldb keyword (and "patched" MAX which had a space at the
                end).
            </li>
            <li>Allowed non-standard SQL operation with date values: SELECT date()+1 FROM atable (instead of:
                SELECT date()+1 DAY FROM atable) gave error before this release.
            </li>
            <li>"select table1.sameName, table2.sameName from ..." ambiguity solved by UCanAccess(for compatibility
                with the access permissive syntax), when detected in access queries.
            </li>
        </ul>

        <h2>2.0.5 Release</h2>
        <ul>
            <li>Fix bug on handling "scale" property in the case of numeric columns with dimension "decimal".</li>
            <li>Improved integration with NetBeans. You can use UCanAccess 2.0.5 with NetBeans8 Reverse Engineer
                (e.g., "Entity classes from database", "Database Schema")
            </li>
            <li>Fix escaping of '?' character in column names.</li>
            <li>Jackcess upgrade to the 2.0.4.</li>
        </ul>

        <h2>2.0.4.1 Release</h2>
        <ul>
            <li>Fix bug in ResultSet.insertRow() implementation.</li>
            <li>Fix bug on DatabaseMetadata.getTables implementation (this patch allows configuring UCanAccess as
                NetBeans service).
            </li>
            <li>Commons-logging upgrade to the 1.1.1.</li>
        </ul>

        <h2>2.0.4 Release</h2>
        <ul>
            <li>Fix bug in DDL execution(create table) with the latest jet formats.</li>
            <li>iif function extension for boolean and numeric and date types.</li>
            <li>"DO" listed and handled as hsqldb keyword.</li>
            <li>clng function implementation (it was wrongly named clong).</li>
        </ul>

        <h2>2.0.3 Release</h2>
        <ul>
            <li>Changed UCanAccess behavior in handling (incorrect) default column values with a size greater than
                the column size. UCanAccess has now the same behavior of Access: a data truncation error will be thrown
                at the real attempt to insert an incorrect value and no more at the accdb/mdb opening (or, in other words,
                at the first connection).
            </li>
            <li>Improved performances in conversions. In the precedent versions, UCanAccess ran slow in some
                particular case, e.g., sql statement not parametric(not Prepared Statement), with a very long string
                containing a double quote (") character.
            </li>
            <li>Fixed bug in handling column name with both numbers and spaces (e.g. 'bla 1err').</li>
            <li>Fixed bug related to numbers passed in scientific notation when not using a PreparedStatement.</li>
            <li>Jackcess upgrade to 2.0.3.</li>
        </ul>

        <h2>2.0.2 Release</h2>
        <ul>
            <li>Added connection parameter remap. It allows to remap the paths to one or more external linked
                databases. The syntax is: <br/> <i>jdbc:ucanaccess://c:/data/&lt;main db&gt;remap=&lt;original db1
                path&gt;|&lt;new db1 path&gt;&amp;&lt;original i-db path&gt;|&lt;new i-db path&gt;</i><br/> e.g.,<br/>
                <i>jdbc:ucanaccess://c:/data/main.mdb;remap=c:\db\linkee1.mdb|C:\pluto\linkee1.mdb&amp;c:\db\linkee2.mdb|C:\pluto\linkee2.mdb.</i>
                <br/>Original path and new path must be separated by '|', different pairs must be separated
                by '&amp;'.
            </li>
            <li>Added connection parameter keepMirror for keeping the mirror hsqldb database after the VM ends and
                so for reusing it in the following VM processes. <br/> e.g.,<br/>
                jdbc:ucanaccess://c:/data/main.mdb;keepMirror=c:/data/mirrorName<br/> It make sense only with memory=false
                (so it forces this setting). It should be used with very large databases only (e.g., 1GB with many OLE
                binary data) and when UCanAccess takes too much time to establish the first connection.
            </li>
            <li>Added support for some ISO-8859 non-roman characters (e.g Euro symbol) in column and table names.</li>
            <li>Added "END" to the keywords list.</li>
            <li>Fixed minor bugs on DatabaseMetadata. Thanks to the SQLeo team.</li>
        </ul>

        <h2>2.0.1 Release</h2>
        <ul>
            <li>Added support for persisting the column properties defined in create table statements: default
                column value and nullability(i.e. required property). Supported both constants and functions as default
                values<br/> e.g., <i>CREATE TABLE AAA ( baaaa TEXT PRIMARY KEY,A LONG DEFAULT 3 NOT NULL, C
                TEXT(255) NOT NULL, d DATETIME DEFAULT now(), e TEXT DEFAULT 'bla')</i>
            </li>
            <li>Fix method closeOnCompletion of UcanaccessStatement (patch missed in the 2.0.0)</li>
        </ul>

        <h2>2.0.0 Release</h2>
        <ul>
            <li>jackcess upgrade to version 2.0.1. So UCanAccess 2.0.0 is compliant with jackcess2 API</li>
            <li>implemented backtick character (`) for escaping identifiers including blank characters(as
                alternative of using square brackets)
            </li>
            <li>fixed major bug on update and delete statements on tables having one or more column names that
                contain a blank character: it caused a desync between hsqldb and the access file
            </li>
            <li>fixed interfacing problem about using UCanAccess from Open Office or Libre Office (the office
                tools, in some cases, weren't able to open few tables)
            </li>
            <li>fixed problem about turning off jackcess logging</li>
            <li>added META-INF\services\java.sql.Driver file</li>
        </ul>

        <h2>1.0.4.1 Release</h2>
        <ul>
            <li>Fixed method closeOnCompletion of UcanaccessStatement</li>
            <li>fixed memory leak in jet loading (it caused OutOfMemoryError during the loading of very large
                databases even with the connection parameter memory=false)
            </li>
        </ul>

        <h2>1.0.4 Release</h2>
        <ul>
            <li>Improved sql conversion so that access keywords (if used as table names, column names, query names)
                are no more escaped (with an x before the keyword). Old sql code(if hard-coded in your sources) is still
                supported so you don't need to change anything.
            </li>
            <li>memory=false connection parameter allowed even for encrypted databases by encrypting hsqldb files
                (file system cache) with a random key.
            </li>
            <li>fixed bug on yes/no constants conversion to true/false.</li>
            <li>added "encrypt" connection parameter for allowing hsqldb files encryption. You can use it in
                conjunction with Memory=false. False by default.
            </li>
            <li>added "sysschema" connection parameter. If this connection parameter is true the msaccess system
                tables will be loaded in the "sys" readonly schema. False by default.
            </li>
            <li>jackcess upgrade to version 1.2.14.2</li>
        </ul>

        <h2>1.0.3 Release. Fix release</h2>
        <ul>
            <li>fixed escaping for access (no standard sql) access keywords referring to data
                types:COUNTER,CURRENCY,DATETIME,MEMO,OLE, SINGLE,TEXT,YESNO,GUID when they are used as name of column or
                table or query
            </li>
            <li>improved escaping of column, table, query names for allowing the use of '(' and ')' character</li>
            <li>fixed a 1.0.2 bug in inserting or updating string with new line or carriage return characters:
                under particular conditions, \n and \r characters were replaced by a blank character
            </li>
            <li>in create table ddl statement, text columns default length to 255 where not specified (before the
                explicit setting of length of text columns was mandatory)
            </li>
            <li>patched handling of temporary access artifacts (i.e. temporary tables, queries, foreign key and
                indexes with the name starting with a tilde)
            </li>
            <li>jackcess upgrade to version 1.2.14</li>
        </ul>

        <h2>1.0.2 Release</h2>
        <ul>
            <li>added write support complex types (i.e., array of Version, Attachment, SingleValue)</li>
            <li>added Lookup domain function</li>
            <li>added support for dynamic domain function (e.g.SELECT DCount("ID","Table1","ID &lt;=" &amp;ID) AS
                Sequence, tValue FROM table1)
            </li>
            <li>added support for count aggregate function in cross_tab functions(it was missed in the previous
                version)
            </li>
            <li>added switch function</li>
            <li>added support for "yes"(converted in true) and "no"(converted in false) boolean constants in
                queries
            </li>
            <li>added functions int, strcomp, strconv, strreverse, rnd, timeserial, string, weekday</li>
            <li>added support for non-standard subquery sintax [SELECT ... FROM ...]. As T</li>
            <li>patched "CREATE TABLE" implementation for the right size of text columns</li>
            <li>fixed regular expression support in like conditions</li>
            <li>jackess upgrade to version 1.2.13</li>
        </ul>

        <h2>1.0.1 Release</h2>
        <ul>
            <li>crosstab queries implementation(Transform... Pivot...)</li>
            <li>added support to STDEV, STDEVP, VAR, VARP aggregate functions</li>
            <li>basic, readonly support to complex types (i.e., array of Version, Attachment, SingleValue)</li>
            <li>fix handling of datatime values with millisecond precision(so not inserted with standard ms access
                api)
            </li>
            <li>fix handling of hsqldb keywords and ms access reserved words and other problems escaping related</li>
        </ul>

        <h2>1.0.0 Release</h2>
        <ul>
            <li>improved csv export</li>
            <li>added support to optional parameters (firstdayofweek,firstweekofyear) in DatePart function: <br/>DatePart(interval,
                date [, firstdayofweek] [, firstweekofyear] )
            </li>
            <li>added date() function</li>
            <li>added support to 'yyyy-MM-dd' and 'yyyy-MM-dd hh:mm:ss' date formats</li>
            <li>extended support for non-standard naming of tables and columns</li>
            <li>patched problems in the binding of a column default value to a function (during the access file
                opening)
            </li>
            <li>added the singleConnection driver parameter, for etl job, scheduled tasks or "one-shot" use of
                UCanAccess
            </li>
            <li>patched bug in insert/update operations with very long text values (1000+ characters) using
                Statement interface
            </li>
            <li>cleared the resetting of the Connection AUTOCOMMIT property at the end of each transaction</li>
            <li>patched SQL bug: '_' wildcard character misinterpreted</li>
            <li>jackess upgrade to version 1.2.12</li>
            <li>fixed problems with single precision numeric (float) db type</li>
        </ul>

        <h2>0.1.1 Release (Beta)</h2>
        <ul>
            <li>Memory usage optimization: added inactivityTimeout driver parameter. Added a specific JUnit test
                case for this (net.ucanaccess.test.MemoryTest)
            </li>
            <li>Fixed some bugs (ccur function scale, setted jackcess log level to Level.OFF by default)</li>
        </ul>
    </body>
</html>
